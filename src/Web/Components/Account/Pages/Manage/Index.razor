@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Update Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Username" class="form-control" placeholder="Please choose your username." />
                <label for="username" class="form-label">Username</label>
                <ValidationMessage For="() => Input.Username" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser _user = default!;
    private string? _username;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _username = await UserManager.GetUserNameAsync(_user);

        Input.Username ??= _username;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.Username != _username)
        {
            var setUsernameResult = await UserManager.SetUserNameAsync(_user, Input.Username);
            if (!setUsernameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set username.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [MaxLength(30, ErrorMessage = "Username can be at most 30 characters")]
        [MinLength(5, ErrorMessage = "Username must be at least 5 characters")]
        [RegularExpression("([a-zA-Z0-9_.]+)", ErrorMessage = "Username can only contain letters and numbers")]
        [Display(Name = "Username")]
        public string? Username { get; set; }
    }
}
