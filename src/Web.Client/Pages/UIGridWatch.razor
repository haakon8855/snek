@using System.Net

@inject IHttpClientFactory HttpClientFactory;
@rendermode InteractiveWebAssembly

<div>
	@if (_game is not null)
	{
		<div class="d-flex justify-content-between align-items-center">
			<h2>Snekpoeng: @_game.Score</h2>
			<div class="p-2" style="display: flex; justify-content: space-between; align-items: center">
				<InputNumber Value="_jumpToPoints"
				             ValueChanged="async (int value) => await JumpToPoints(value)"
				             ValueExpression="() => _jumpToPoints"
				             class="form-control"
				             disabled="@_jumpInputIsDisabled"/>
				<label for="toggleDoubleSpeed" class="fw-bold px-2" style="display: flex; align-items: center"
				       title="Snabbsnek">
					@if (_enableDoubleSpeed)
					{
						<span class="icon icon-fast-forward-fill"></span>
					}
					else
					{
						<span class="icon icon-fast-forward"></span>
					}
				</label>
				<InputCheckbox id="toggleDoubleSpeed" Value="_enableDoubleSpeed"
				               ValueChanged="(bool value) => DoubleSpeedChanged(value)"
				               ValueExpression="() => _enableDoubleSpeed" hidden/>
			</div>
		</div>
		<div style="background-color: black;">
			@for (int i = 0; i < _game.Grid.Length; i++)
			{
				<div class="snek-row">
					@for (int j = 0; j < _game.Grid[0].Length; j++)
					{
						<Cell
							Row="@i"
							Col="@j"
							Value="@_game.Grid[i][j]"
							SnekDirection="@_game.CurrentSnekDirection"/>
					}
				</div>
			}
		</div>
	}
</div>

@code {

	[Parameter] public int Id { get; set; }
	[Parameter] public int StartPoints { get; set; }

	private Game? _game;
	private PeriodicTimer _timer = new(TimeSpan.FromMilliseconds(75));
	private Replay? _replay;
	private bool _enableDoubleSpeed = false;
	private bool _enableDoubleSpeedChanged = false;
	private int _jumpToPoints = 0;
	private bool _jumpInputIsDisabled = false;

	protected override async Task OnInitializedAsync()
	{
		_jumpToPoints = StartPoints;
		_game = new Game();
		StateHasChanged();

		var httpClient = HttpClientFactory.CreateClient("ServerApi");
		try
		{
			var response = await httpClient.GetAsync($"api/score/{Id}");
			if (response.StatusCode != HttpStatusCode.OK)
				return;

			var result = await response.Content.ReadFromJsonAsync<Replay>();

			if (result is null)
				return;

			_replay = result;
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
			throw;
		}

		var game = new Game();
		await game.Init(_replay.Seed);
		_game = SimulateUntilPointsReached(game, StartPoints);
		StateHasChanged();

		await InitTimer();
		_jumpInputIsDisabled = true;
	}

	private async Task InitTimer()
	{
		await Task.Delay(100);
		if (_game is null || _replay is null)
			return;
		while (await _timer.WaitForNextTickAsync())
		{
			if (_enableDoubleSpeedChanged)
			{
				var delay = _enableDoubleSpeed ? 30 : 75;
				_timer = new(TimeSpan.FromMilliseconds(delay));
				_enableDoubleSpeedChanged = false;
			}

			var step = _game.Step;
			if (_replay.Inputs.TryGetValue(step, out var input))
			{
				_game.ChangeSnekDirection(input);
			}

			var score = _game.Score;
			var validState = _game.Update();
			if (score < _game.Score)
				_jumpToPoints = _game.Score;


			StateHasChanged();
			if (!validState)
			{
				StateHasChanged();
				break;
			}
		}
	}

	private Game SimulateUntilPointsReached(Game game, int points)
	{
		if (_replay is null)
			return game;
		while (game.Score < points)
		{
			var step = game.Step;
			if (_replay.Inputs.TryGetValue(step, out var input))
				game.ChangeSnekDirection(input);

			var validState = game.Update();
			if (!validState)
				break;
		}

		return game;
	}

	private void DoubleSpeedChanged(bool value)
	{
		_enableDoubleSpeed = value;
		_enableDoubleSpeedChanged = true;
	}

	private async Task JumpToPoints(int value)
	{
		_jumpToPoints = value;
		if (_jumpToPoints < 0)
			_jumpToPoints = Math.Abs(_jumpToPoints);
		if (_replay is null)
			return;
		var game = new Game();
		await game.Init(_replay.Seed);
		_game = SimulateUntilPointsReached(game, _jumpToPoints);
		StateHasChanged();
	}

}
