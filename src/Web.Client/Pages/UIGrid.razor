@using System.Text.Json
@using Web.Client.Services
@using System.Net

@inject IHttpClientFactory HttpClientFactory;
@implements IKeyEventListener
@rendermode InteractiveWebAssembly

@if (_game is null)
{
	<div style="filter: blur(3px)">
		<div class="d-flex justify-content-between">
			<h2>Snekpoeng: 0</h2>
			<div class="p-2">
				<label for="toggleMusic" class="fw-bold px-2">Music</label>
				<input id="toggleMusic" type="checkbox" @bind="_enableMusic"/>
			</div>
		</div>
		<div style="background-color: black;">
			@for (var i = 0; i < Game.Size.Height; i++)
			{
				<div class="snek-row">
					@for (var j = 0; j < Game.Size.Width; j++)
					{
						<Cell
							Row="@i"
							Col="@j"
							Value="0"
							SnekDirection="Direction.Right"/>
					}
				</div>
			}
		</div>
	</div>
	<div class=" position-absolute top-50 start-50">
		<div class="spinner-border custom-spinner" role="status">
			<span class="sr-only" style="font-size: 28px; color:white">Loading</span>
		</div>
	</div>
}
else
{
	<div>
		<div class="d-flex justify-content-between">
			<h2>Snekpoeng: @_game.Score</h2>
			<div class="p-2">
				<label for="toggleMusic" class="fw-bold px-2">Music</label>
				<input id="toggleMusic" type="checkbox" @bind="_enableMusic"/>
			</div>
		</div>
		@if (_playMusic)
		{
			<audio id="musicPlayer" autoplay muted=@_playMusic>
				<source src="assets/music.mp3"/>
			</audio>
			<script>document.getElementById('musicPlayer').volume = 0.1</script>
		}
		@if (_playNice)
		{
			<audio id="musicPlayerNice" autoplay muted=@_playNice>
				<source src="assets/nice.mp3"/>
			</audio>
			<script>document.getElementById('musicPlayerNice').volume = 0.5</script>
		}

		<div style="background-color: black;">
			@for (var i = 0; i < Game.Size.Height; i++)
			{
				<div class="snek-row">
					@for (var j = 0; j < Game.Size.Width; j++)
					{
						<Cell
							Row="@i"
							Col="@j"
							Value="@_game.Grid[i][j]"
							SnekDirection="@_game.CurrentSnekDirection"/>
					}
				</div>
			}
		</div>
		@if (_gameOver)
		{
			<div class="position-absolute top-50 start-50 translate-middle text-center">
				<h1 class="text-white">Game Over</h1>
				@if (_scoreResponseCode == HttpStatusCode.BadRequest)
				{
					<h3 class="text-white">Juks og fanteri!</h3>
					<h4 class="text-white">Spill spillet ordentlig for å få highsnek på lista</h4>
				}
				<button class="btn btn-primary" @onclick="async () => await ResetGame()">Reset</button>
			</div>
		}
	</div>
}

@code {
	private Game? _game;
	private readonly PeriodicTimer _timer = new(TimeSpan.FromMilliseconds(Game.TickLength));
	private bool _gameOver = false;
	private bool _timerStarted = false;
	private bool _enableMusic = false;
	private bool _playMusic = false;
	private bool _playNice = false;
	private HttpStatusCode _scoreResponseCode;

	protected override async Task OnInitializedAsync()
	{
		_game = await Game.CreateAsync(HttpClientFactory);
	}

	private async Task InitTimer()
	{
		_playMusic = _enableMusic;
		while (await _timer.WaitForNextTickAsync())
		{
			var validState = _game.Update();
			_gameOver = !validState;

			if (_game.Score == 69)
				_playNice = true;

			if (!validState)
				_playMusic = false;

			StateHasChanged();

			if (!validState)
			{
				_scoreResponseCode = await _game.GameOver();
				StateHasChanged();
				break;
			}
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
			KeyEventHandler.RegisterListener(this);
	}

	private async Task ResetGame()
	{
		_gameOver = false;
		_timerStarted = false;
		await _game.Init();
		StateHasChanged();
	}

	public async Task KeyEventChanged(string keys)
	{
		var keyList = JsonSerializer.Deserialize<List<string>>(keys);

		var requestedSnekDirection = _game.CurrentSnekDirection;
		var requestedFoodDirection = _game.CurrentFoodDirection;

		foreach (string key in keyList)
		{
			switch (key)
			{
				case "Enter":
					if (_gameOver)
						await ResetGame();
					return;
				case "i":
				case "ArrowUp":
					requestedSnekDirection = Direction.Up;
					break;
				case "k":
				case "ArrowDown":
					requestedSnekDirection = Direction.Down;
					break;
				case "j":
				case "ArrowLeft":
					requestedSnekDirection = Direction.Left;
					break;
				case "l":
				case "ArrowRight":
					requestedSnekDirection = Direction.Right;
					break;
				case "w":
					requestedFoodDirection = Direction.Up;
					break;
				case "s":
					requestedFoodDirection = Direction.Down;
					break;
				case "a":
					requestedFoodDirection = Direction.Left;
					break;
				case "d":
					requestedFoodDirection = Direction.Right;
					break;
			}
		}

		_game.ChangeSnekDirection(requestedSnekDirection);
		_game.ChangeFoodDirection(requestedFoodDirection);

		if (!_gameOver && !_timerStarted)
		{
			await InitTimer();
			_timerStarted = true;
		}
	}

}
